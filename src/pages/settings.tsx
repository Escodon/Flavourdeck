import Head from 'next/head';
import { useRouter } from 'next/router';
import { useState } from 'react';
import log from './api/log';
import { listenForUser, syncUserSettings } from './api/users/functions';


export default function UserSettings() {
  const router = useRouter();
  const { uid } = router.query;
  //const [user, setUser] = useState("");
  const [email, setEmail] = useState("");
  const [name, setName] = useState("");
  type User = {
    displayName: string | null;
    email: string | null;
    uid: string | null;
  };

  //const [user, setUser] = useState<User | null>(null);
  let user: User | null = null;

  listenForUser((user) => {
    if (!user) {
      router.push({
        pathname: '/login',
        query: {
          then: '/settings',
          thenDisplayName: 'Settings'
        }
      })
    }
  })

  /**
   * Updates the user settings
   * @returns {void} 
   */
  function updateSettings() {
    log("Updating user settings", "settings/updateSettings")
    if (user == null) { console.error("User is null! Cannot update settings!"); return }
    log("Updating user settings (local store)", "settings/updateSettings")
    let newName = name
    let newEmail = email
    let newSettings = {
      name: newName,
      email: newEmail,
    }
    console.log(newSettings)
    localStorage.setItem('userSettings', JSON.stringify(newSettings));
    log("Complete! Updating user settings (database)", "settings/updateSettings")
    let settingsToDB = {
      uid: user.uid ?? "123456",
      displayName: newName,
      email: newEmail,
      darkMode: false, // To be implamented
    }
    syncUserSettings(settingsToDB); 
  }

  log("Rendering user settings page for user with uid " + uid, "settings")
  log("User is " + JSON.stringify(user), "settings")

  return (
    <>
      <Head>
        <title>Flavourdeck</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Settings</h1>
        <p>UID: {JSON.stringify(user?.uid)}</p>
        <h2>User profile:</h2>
        <p>Name: {user ? user.displayName : "Unknown"}</p>
        <input type="text" placeholder="Change your name" onChange={e => setName(e.target.value)} />
        <br />
        <p>Email: {user ? user.email : "unknown email"}</p>
        <input type="text" placeholder="Change your email" onChange={e => setEmail(e.target.value)} />
        <br />
        <p>Profile picture:</p>
        <input type="file" />
        <br />
        <button className="primary" onClick={updateSettings}>Save</button>
      </main>
    </>
  )
}